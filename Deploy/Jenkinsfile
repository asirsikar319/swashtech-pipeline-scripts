node {
  stage("Git Clone"){
      git credentialsId: 'asirsikar319_github', url: '${selectRepository}'
      steps {
         script {
            currentBuild.displayName = ${serviceName}
         }
      }
  }
  withCredentials([string(credentialsId: 'dockerhub_pwd', variable: 'PASSWORD')]) {
        sh 'docker login -u asirsikar319 -p $PASSWORD'
  }
  if(params.deploymentType == "New"){
    stage('Deploy') {
    withKubeConfig([credentialsId: 'asirsikar319_kubernates',
                    serverUrl: 'https://kubernetes.docker.internal:6443',
                    contextName: 'docker-desktop',
                    clusterName: 'docker-desktop',
                    namespace: '${namespace}'
                    ]) {
      sh 'kubectl apply -f deployment.yaml'
      sh 'kubectl create configmap ${serviceName} --from-file=etc/config/ -n ${namespace}'      
    }
   }
  }else if(params.deploymentType == "Update"){
    stage('Deploy') {
    withKubeConfig([credentialsId: 'asirsikar319_kubernates',
                    serverUrl: 'https://kubernetes.docker.internal:6443',
                    contextName: 'docker-desktop',
                    clusterName: 'docker-desktop',
                    namespace: '${namespace}'
                    ]) {
      sh 'kubectl delete -f deployment.yaml'
      sh 'kubectl delete configmap ${serviceName} -n ${namespace}'
      sh 'kubectl apply -f deployment.yaml'
      sh 'kubectl create configmap ${serviceName} --from-file=etc/config/ -n ${namespace}'      
    }
   }
  }else if(params.deploymentType == "Delete"){
    stage('Deploy') {
    withKubeConfig([credentialsId: 'asirsikar319_kubernates',
                    serverUrl: 'https://kubernetes.docker.internal:6443',
                    contextName: 'docker-desktop',
                    clusterName: 'docker-desktop',
                    namespace: '${namespace}'
                    ]) {
      sh 'kubectl delete -f deployment.yaml'
      sh 'kubectl delete configmap ${serviceName} -n ${namespace}'   
    }
   }
  }
}
